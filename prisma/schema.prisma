// MVP Prisma schema for Social app
// Uses PostgreSQL by default

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  SILVER
  GOLD
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String?       // Added for credentials authentication
  image        String?
  bio          String?
  age          Int?
  gender       String?
  location     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastActive   DateTime?
  isVerified   Boolean       @default(false)
  deletedAt    DateTime?
  onboarded    Boolean       @default(false) // Added for onboarding flow
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  subscription Subscription?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  matchesA         Match[]   @relation("UserAMatches")
  matchesB         Match[]   @relation("UserBMatches")
  notifications    Notification[]
  passwordResetTokens PasswordResetToken[]
  likesGiven       UserLike[] @relation("LikesGiven")
  likesReceived    UserLike[] @relation("LikesReceived")
}

model Post {
  id        String     @id @default(uuid())
  content   String
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  visibility String    @default("public")
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Subscription {
  id        String            @id @default(uuid())
  userId    String            @unique
  tier      SubscriptionTier
  startedAt DateTime          @default(now())
  expiresAt DateTime?
  user      User              @relation(fields: [userId], references: [id])
}

model Message {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  senderId    String
  recipientId String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  read        Boolean  @default(false)
}

model Match {
  id        String   @id @default(uuid())
  userAId   String
  userBId   String
  userA     User     @relation("UserAMatches", fields: [userAId], references: [id])
  userB     User     @relation("UserBMatches", fields: [userBId], references: [id])
  matchedAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
}

model UserLike {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  liked      Boolean  // true = like, false = dislike
  createdAt  DateTime @default(now())
  fromUser   User     @relation("LikesGiven", fields: [fromUserId], references: [id])
  toUser     User     @relation("LikesReceived", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
} 